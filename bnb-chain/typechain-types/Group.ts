/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ExternalMemberStruct = {
  walletAddress: PromiseOrValue<string>;
  telegramUsername: PromiseOrValue<string>;
  isActiveVoter: PromiseOrValue<boolean>;
  latestPeriodParticipation: PromiseOrValue<BigNumberish>;
};

export type ExternalMemberStructOutput = [
  string,
  string,
  boolean,
  BigNumber
] & {
  walletAddress: string;
  telegramUsername: string;
  isActiveVoter: boolean;
  latestPeriodParticipation: BigNumber;
};

export type GroupDataStruct = {
  groupAddress: PromiseOrValue<string>;
  title: PromiseOrValue<string>;
  telegramGroupUrl: PromiseOrValue<string>;
  membersCount: PromiseOrValue<BigNumberish>;
  memberAddresses: PromiseOrValue<string>[];
  joinStatus: PromiseOrValue<BigNumberish>;
};

export type GroupDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string[],
  number
] & {
  groupAddress: string;
  title: string;
  telegramGroupUrl: string;
  membersCount: BigNumber;
  memberAddresses: string[];
  joinStatus: number;
};

export type GroupSettingsStruct = {
  title: PromiseOrValue<string>;
  telegramGroupUrl: PromiseOrValue<string>;
  coordinator: ExternalMemberStruct;
  coordinatorCommissionPercentage: PromiseOrValue<BigNumberish>;
  contributionAmountInWei: PromiseOrValue<BigNumberish>;
  prizePercentage: PromiseOrValue<BigNumberish>;
};

export type GroupSettingsStructOutput = [
  string,
  string,
  ExternalMemberStructOutput,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  title: string;
  telegramGroupUrl: string;
  coordinator: ExternalMemberStructOutput;
  coordinatorCommissionPercentage: BigNumber;
  contributionAmountInWei: BigNumber;
  prizePercentage: BigNumber;
};

export type NewMemberValStruct = {
  memberAddress: PromiseOrValue<string>;
  telegramUsername: PromiseOrValue<string>;
};

export type NewMemberValStructOutput = [string, string] & {
  memberAddress: string;
  telegramUsername: string;
};

export type TransferValStruct = {
  recipient: PromiseOrValue<string>;
  transferAmount: PromiseOrValue<BigNumberish>;
};

export type TransferValStructOutput = [string, BigNumber] & {
  recipient: string;
  transferAmount: BigNumber;
};

export type ExternalProposalStruct = {
  index: PromiseOrValue<BigNumberish>;
  category: PromiseOrValue<BigNumberish>;
  proposedAt: PromiseOrValue<BigNumberish>;
  proposer: ExternalMemberStruct;
  completedAt: PromiseOrValue<BigNumberish>;
  isApproved: PromiseOrValue<boolean>;
  approversCount: PromiseOrValue<BigNumberish>;
  stringProposalValue: PromiseOrValue<string>;
  uintProposalValue: PromiseOrValue<BigNumberish>;
  coordinatorProposalValue: ExternalMemberStruct;
  newMemberProposalValue: NewMemberValStruct;
  transferProposalValue: TransferValStruct;
};

export type ExternalProposalStructOutput = [
  BigNumber,
  number,
  BigNumber,
  ExternalMemberStructOutput,
  BigNumber,
  boolean,
  BigNumber,
  string,
  BigNumber,
  ExternalMemberStructOutput,
  NewMemberValStructOutput,
  TransferValStructOutput
] & {
  index: BigNumber;
  category: number;
  proposedAt: BigNumber;
  proposer: ExternalMemberStructOutput;
  completedAt: BigNumber;
  isApproved: boolean;
  approversCount: BigNumber;
  stringProposalValue: string;
  uintProposalValue: BigNumber;
  coordinatorProposalValue: ExternalMemberStructOutput;
  newMemberProposalValue: NewMemberValStructOutput;
  transferProposalValue: TransferValStructOutput;
};

export type ExternalPeriodStruct = {
  startedAt: PromiseOrValue<BigNumberish>;
  endedAt: PromiseOrValue<BigNumberish>;
  remainingPeriodBalanceInWei: PromiseOrValue<BigNumberish>;
  contributionAmountInWei: PromiseOrValue<BigNumberish>;
  coordinatorCommissionPercentage: PromiseOrValue<BigNumberish>;
  prizePercentage: PromiseOrValue<BigNumberish>;
  roundsCount: PromiseOrValue<BigNumberish>;
  dueWinnersCount: PromiseOrValue<BigNumberish>;
};

export type ExternalPeriodStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  startedAt: BigNumber;
  endedAt: BigNumber;
  remainingPeriodBalanceInWei: BigNumber;
  contributionAmountInWei: BigNumber;
  coordinatorCommissionPercentage: BigNumber;
  prizePercentage: BigNumber;
  roundsCount: BigNumber;
  dueWinnersCount: BigNumber;
};

export type ExternalRoundStruct = {
  drawnAt: PromiseOrValue<BigNumberish>;
  winner: ExternalMemberStruct;
  contributorCount: PromiseOrValue<BigNumberish>;
};

export type ExternalRoundStructOutput = [
  BigNumber,
  ExternalMemberStructOutput,
  BigNumber
] & {
  drawnAt: BigNumber;
  winner: ExternalMemberStructOutput;
  contributorCount: BigNumber;
};

export interface GroupInterface extends utils.Interface {
  functions: {
    "activeVotersCount()": FunctionFragment;
    "approveContributionAmountProposal(uint256)": FunctionFragment;
    "approveNewCoordinatorCommissionPercentageProposal(uint256)": FunctionFragment;
    "approveNewCoordinatorProposal(uint256)": FunctionFragment;
    "approveNewMemberProposal(uint256)": FunctionFragment;
    "approveNewTelegramGroupUrlProposal(uint256)": FunctionFragment;
    "approveNewTitleProposal(uint256)": FunctionFragment;
    "approvePrizePercentageProposal(uint256)": FunctionFragment;
    "approveTransferProposal(uint256)": FunctionFragment;
    "contribute()": FunctionFragment;
    "contributionAmountInWei()": FunctionFragment;
    "coordinator()": FunctionFragment;
    "coordinatorCommissionPercentage()": FunctionFragment;
    "coordinatorProposalValues(uint256)": FunctionFragment;
    "drawWinner()": FunctionFragment;
    "getApproverByIndexAndProposalIndex(uint256,uint256)": FunctionFragment;
    "getDueWinnerByIndexAndPeriodIndex(uint256,uint256)": FunctionFragment;
    "getGroupDetail()": FunctionFragment;
    "getGroupSettings()": FunctionFragment;
    "getIncompleteProposalByIncompleteProposalsIndexesIndex(uint256)": FunctionFragment;
    "getIncompleteProposalsIndexesCount()": FunctionFragment;
    "getMemberByIndex(uint256)": FunctionFragment;
    "getMembersCount()": FunctionFragment;
    "getPeriodByIndex(uint256)": FunctionFragment;
    "getPeriodsCount()": FunctionFragment;
    "getRoundByIndexAndPeriodIndex(uint256,uint256)": FunctionFragment;
    "leave()": FunctionFragment;
    "memberAddresses(uint256)": FunctionFragment;
    "memberIndices(address)": FunctionFragment;
    "members(address)": FunctionFragment;
    "newMemberProposalValues(uint256)": FunctionFragment;
    "periods(uint256)": FunctionFragment;
    "prizePercentage()": FunctionFragment;
    "proposeNewContributionAmountInWei(uint256)": FunctionFragment;
    "proposeNewCoordinator(address)": FunctionFragment;
    "proposeNewCoordinatorCommissionPercentage(uint256)": FunctionFragment;
    "proposeNewMember(address,string)": FunctionFragment;
    "proposeNewPrizePercentage(uint256)": FunctionFragment;
    "proposeNewString(string,uint8)": FunctionFragment;
    "proposeTransfer(address,uint256)": FunctionFragment;
    "rejectNewCoordinatorProposal(uint256)": FunctionFragment;
    "rejectNewMemberProposal(uint256)": FunctionFragment;
    "rejectStringProposal(uint256)": FunctionFragment;
    "rejectTransferProposal(uint256)": FunctionFragment;
    "rejectUintProposal(uint256)": FunctionFragment;
    "startPeriod()": FunctionFragment;
    "stringProposalValues(uint256)": FunctionFragment;
    "telegramGroupUrl()": FunctionFragment;
    "title()": FunctionFragment;
    "transferProposalValues(uint256)": FunctionFragment;
    "uintProposalValues(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeVotersCount"
      | "approveContributionAmountProposal"
      | "approveNewCoordinatorCommissionPercentageProposal"
      | "approveNewCoordinatorProposal"
      | "approveNewMemberProposal"
      | "approveNewTelegramGroupUrlProposal"
      | "approveNewTitleProposal"
      | "approvePrizePercentageProposal"
      | "approveTransferProposal"
      | "contribute"
      | "contributionAmountInWei"
      | "coordinator"
      | "coordinatorCommissionPercentage"
      | "coordinatorProposalValues"
      | "drawWinner"
      | "getApproverByIndexAndProposalIndex"
      | "getDueWinnerByIndexAndPeriodIndex"
      | "getGroupDetail"
      | "getGroupSettings"
      | "getIncompleteProposalByIncompleteProposalsIndexesIndex"
      | "getIncompleteProposalsIndexesCount"
      | "getMemberByIndex"
      | "getMembersCount"
      | "getPeriodByIndex"
      | "getPeriodsCount"
      | "getRoundByIndexAndPeriodIndex"
      | "leave"
      | "memberAddresses"
      | "memberIndices"
      | "members"
      | "newMemberProposalValues"
      | "periods"
      | "prizePercentage"
      | "proposeNewContributionAmountInWei"
      | "proposeNewCoordinator"
      | "proposeNewCoordinatorCommissionPercentage"
      | "proposeNewMember"
      | "proposeNewPrizePercentage"
      | "proposeNewString"
      | "proposeTransfer"
      | "rejectNewCoordinatorProposal"
      | "rejectNewMemberProposal"
      | "rejectStringProposal"
      | "rejectTransferProposal"
      | "rejectUintProposal"
      | "startPeriod"
      | "stringProposalValues"
      | "telegramGroupUrl"
      | "title"
      | "transferProposalValues"
      | "uintProposalValues"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeVotersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveContributionAmountProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewCoordinatorCommissionPercentageProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewCoordinatorProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewMemberProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewTelegramGroupUrlProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewTitleProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePrizePercentageProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransferProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionAmountInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorCommissionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorProposalValues",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproverByIndexAndProposalIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDueWinnerByIndexAndPeriodIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupDetail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncompleteProposalByIncompleteProposalsIndexesIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncompleteProposalsIndexesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundByIndexAndPeriodIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "memberAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberIndices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newMemberProposalValues",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periods",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prizePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewContributionAmountInWei",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewCoordinator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewCoordinatorCommissionPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewPrizePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewString",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectNewCoordinatorProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectNewMemberProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectStringProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectTransferProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectUintProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stringProposalValues",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "telegramGroupUrl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferProposalValues",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintProposalValues",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeVotersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveContributionAmountProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewCoordinatorCommissionPercentageProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewCoordinatorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewMemberProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewTelegramGroupUrlProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewTitleProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePrizePercentageProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTransferProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionAmountInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorCommissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorProposalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproverByIndexAndProposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDueWinnerByIndexAndPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncompleteProposalByIncompleteProposalsIndexesIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncompleteProposalsIndexesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundByIndexAndPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newMemberProposalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periods", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewContributionAmountInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewCoordinatorCommissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewPrizePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectNewCoordinatorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectNewMemberProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectStringProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectTransferProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectUintProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringProposalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "telegramGroupUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferProposalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintProposalValues",
    data: BytesLike
  ): Result;

  events: {
    "WinnerDrawn(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WinnerDrawn"): EventFragment;
}

export interface WinnerDrawnEventObject {
  winner: ExternalMemberStructOutput;
}
export type WinnerDrawnEvent = TypedEvent<
  [ExternalMemberStructOutput],
  WinnerDrawnEventObject
>;

export type WinnerDrawnEventFilter = TypedEventFilter<WinnerDrawnEvent>;

export interface Group extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GroupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeVotersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveContributionAmountProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNewCoordinatorCommissionPercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNewTelegramGroupUrlProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNewTitleProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvePrizePercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributionAmountInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    coordinator(overrides?: CallOverrides): Promise<[string]>;

    coordinatorCommissionPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coordinatorProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproverByIndexAndProposalIndex(
      index: PromiseOrValue<BigNumberish>,
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalMemberStructOutput]>;

    getDueWinnerByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalMemberStructOutput]>;

    getGroupDetail(overrides?: CallOverrides): Promise<[GroupDataStructOutput]>;

    getGroupSettings(
      overrides?: CallOverrides
    ): Promise<[GroupSettingsStructOutput]>;

    getIncompleteProposalByIncompleteProposalsIndexesIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalProposalStructOutput]>;

    getIncompleteProposalsIndexesCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMemberByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalMemberStructOutput]>;

    getMembersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPeriodByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalPeriodStructOutput]>;

    getPeriodsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoundByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ExternalRoundStructOutput]>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    memberIndices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        telegramUsername: string;
        isActiveVoter: boolean;
        latestPeriodParticipation: BigNumber;
      }
    >;

    newMemberProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { memberAddress: string; telegramUsername: string }
    >;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        endedAt: BigNumber;
        remainingPeriodBalanceInWei: BigNumber;
        contributionAmountInWei: BigNumber;
        coordinatorCommissionPercentage: BigNumber;
        prizePercentage: BigNumber;
      }
    >;

    prizePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeNewContributionAmountInWei(
      newContributionAmountInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewCoordinator(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewCoordinatorCommissionPercentage(
      newCoordinatorCommissionPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewMember(
      memberAddress: PromiseOrValue<string>,
      telegramUsername: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewPrizePercentage(
      newPrizePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewString(
      newValue: PromiseOrValue<string>,
      category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeTransfer(
      recipient: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectStringProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectUintProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPeriod(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    telegramGroupUrl(overrides?: CallOverrides): Promise<[string]>;

    title(overrides?: CallOverrides): Promise<[string]>;

    transferProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipient: string; transferAmount: BigNumber }
    >;

    uintProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  activeVotersCount(overrides?: CallOverrides): Promise<BigNumber>;

  approveContributionAmountProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNewCoordinatorCommissionPercentageProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNewCoordinatorProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNewMemberProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNewTelegramGroupUrlProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNewTitleProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvePrizePercentageProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTransferProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contribute(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributionAmountInWei(overrides?: CallOverrides): Promise<BigNumber>;

  coordinator(overrides?: CallOverrides): Promise<string>;

  coordinatorCommissionPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coordinatorProposalValues(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  drawWinner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproverByIndexAndProposalIndex(
    index: PromiseOrValue<BigNumberish>,
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalMemberStructOutput>;

  getDueWinnerByIndexAndPeriodIndex(
    index: PromiseOrValue<BigNumberish>,
    periodIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalMemberStructOutput>;

  getGroupDetail(overrides?: CallOverrides): Promise<GroupDataStructOutput>;

  getGroupSettings(
    overrides?: CallOverrides
  ): Promise<GroupSettingsStructOutput>;

  getIncompleteProposalByIncompleteProposalsIndexesIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalProposalStructOutput>;

  getIncompleteProposalsIndexesCount(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMemberByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalMemberStructOutput>;

  getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getPeriodByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalPeriodStructOutput>;

  getPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRoundByIndexAndPeriodIndex(
    index: PromiseOrValue<BigNumberish>,
    periodIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ExternalRoundStructOutput>;

  leave(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  memberIndices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      telegramUsername: string;
      isActiveVoter: boolean;
      latestPeriodParticipation: BigNumber;
    }
  >;

  newMemberProposalValues(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { memberAddress: string; telegramUsername: string }
  >;

  periods(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      startedAt: BigNumber;
      endedAt: BigNumber;
      remainingPeriodBalanceInWei: BigNumber;
      contributionAmountInWei: BigNumber;
      coordinatorCommissionPercentage: BigNumber;
      prizePercentage: BigNumber;
    }
  >;

  prizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  proposeNewContributionAmountInWei(
    newContributionAmountInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewCoordinator(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewCoordinatorCommissionPercentage(
    newCoordinatorCommissionPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewMember(
    memberAddress: PromiseOrValue<string>,
    telegramUsername: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewPrizePercentage(
    newPrizePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewString(
    newValue: PromiseOrValue<string>,
    category: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeTransfer(
    recipient: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectNewCoordinatorProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectNewMemberProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectStringProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectTransferProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectUintProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPeriod(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringProposalValues(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  telegramGroupUrl(overrides?: CallOverrides): Promise<string>;

  title(overrides?: CallOverrides): Promise<string>;

  transferProposalValues(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { recipient: string; transferAmount: BigNumber }
  >;

  uintProposalValues(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    activeVotersCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveContributionAmountProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNewCoordinatorCommissionPercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNewTelegramGroupUrlProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNewTitleProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvePrizePercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contribute(overrides?: CallOverrides): Promise<void>;

    contributionAmountInWei(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<string>;

    coordinatorCommissionPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    drawWinner(overrides?: CallOverrides): Promise<void>;

    getApproverByIndexAndProposalIndex(
      index: PromiseOrValue<BigNumberish>,
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalMemberStructOutput>;

    getDueWinnerByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalMemberStructOutput>;

    getGroupDetail(overrides?: CallOverrides): Promise<GroupDataStructOutput>;

    getGroupSettings(
      overrides?: CallOverrides
    ): Promise<GroupSettingsStructOutput>;

    getIncompleteProposalByIncompleteProposalsIndexesIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalProposalStructOutput>;

    getIncompleteProposalsIndexesCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalMemberStructOutput>;

    getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalPeriodStructOutput>;

    getPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ExternalRoundStructOutput>;

    leave(overrides?: CallOverrides): Promise<void>;

    memberAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    memberIndices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        telegramUsername: string;
        isActiveVoter: boolean;
        latestPeriodParticipation: BigNumber;
      }
    >;

    newMemberProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { memberAddress: string; telegramUsername: string }
    >;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        endedAt: BigNumber;
        remainingPeriodBalanceInWei: BigNumber;
        contributionAmountInWei: BigNumber;
        coordinatorCommissionPercentage: BigNumber;
        prizePercentage: BigNumber;
      }
    >;

    prizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewContributionAmountInWei(
      newContributionAmountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewCoordinator(
      newValue: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewCoordinatorCommissionPercentage(
      newCoordinatorCommissionPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewMember(
      memberAddress: PromiseOrValue<string>,
      telegramUsername: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewPrizePercentage(
      newPrizePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewString(
      newValue: PromiseOrValue<string>,
      category: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeTransfer(
      recipient: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectStringProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectUintProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startPeriod(overrides?: CallOverrides): Promise<void>;

    stringProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    telegramGroupUrl(overrides?: CallOverrides): Promise<string>;

    title(overrides?: CallOverrides): Promise<string>;

    transferProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipient: string; transferAmount: BigNumber }
    >;

    uintProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "WinnerDrawn(tuple)"(winner?: null): WinnerDrawnEventFilter;
    WinnerDrawn(winner?: null): WinnerDrawnEventFilter;
  };

  estimateGas: {
    activeVotersCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveContributionAmountProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNewCoordinatorCommissionPercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNewTelegramGroupUrlProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNewTitleProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvePrizePercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributionAmountInWei(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorCommissionPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproverByIndexAndProposalIndex(
      index: PromiseOrValue<BigNumberish>,
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDueWinnerByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupDetail(overrides?: CallOverrides): Promise<BigNumber>;

    getGroupSettings(overrides?: CallOverrides): Promise<BigNumber>;

    getIncompleteProposalByIncompleteProposalsIndexesIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncompleteProposalsIndexesCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberIndices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newMemberProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewContributionAmountInWei(
      newContributionAmountInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewCoordinator(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewCoordinatorCommissionPercentage(
      newCoordinatorCommissionPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewMember(
      memberAddress: PromiseOrValue<string>,
      telegramUsername: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewPrizePercentage(
      newPrizePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewString(
      newValue: PromiseOrValue<string>,
      category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeTransfer(
      recipient: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectStringProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectUintProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPeriod(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    telegramGroupUrl(overrides?: CallOverrides): Promise<BigNumber>;

    title(overrides?: CallOverrides): Promise<BigNumber>;

    transferProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeVotersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveContributionAmountProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNewCoordinatorCommissionPercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNewTelegramGroupUrlProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNewTitleProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvePrizePercentageProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributionAmountInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorCommissionPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coordinatorProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproverByIndexAndProposalIndex(
      index: PromiseOrValue<BigNumberish>,
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDueWinnerByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupDetail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGroupSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncompleteProposalByIncompleteProposalsIndexesIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncompleteProposalsIndexesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriodByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundByIndexAndPeriodIndex(
      index: PromiseOrValue<BigNumberish>,
      periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberIndices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newMemberProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeNewContributionAmountInWei(
      newContributionAmountInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewCoordinator(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewCoordinatorCommissionPercentage(
      newCoordinatorCommissionPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewMember(
      memberAddress: PromiseOrValue<string>,
      telegramUsername: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewPrizePercentage(
      newPrizePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewString(
      newValue: PromiseOrValue<string>,
      category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeTransfer(
      recipient: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectNewCoordinatorProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectNewMemberProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectStringProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectTransferProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectUintProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPeriod(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    telegramGroupUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintProposalValues(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
